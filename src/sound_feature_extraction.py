import msdi_io as msdi
import matplotlib.pyplot as plt
import os
import numpy as np 
import skimage 
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.utils import shuffle

def train(X,y):
    clf = svm.SVC()
    clf.fit(X, y)
    return clf

def feature_extractor_processing(nbr_sample):
    _msdi_path = "./../data/"
    df = msdi.get_msdi_dataframe(_msdi_path)
    df = shuffle(df)

    datas=[]
    for i in range(min(len(df),nbr_sample)):
        data = msdi.load_mfcc(df.iloc[i], _msdi_path)

        data_2 = np.zeros((len(data) - 1, len(data[0])))
        for j in range(len(data) - 1):
            data_2[j,:] = data[j+1] - data[j]

        data_3 = np.zeros((len(data_2) - 1, len(data_2[0])))
        for j in range(len(data_2) - 1):
            data_3[j,:] = data_2[j+1] - data_2[j]

        tot_data = np.concatenate((data,data_2,data_3), axis=0)
        data = tot_data.mean(axis=0)
        datas.append(data.tolist())

    print(np.array(datas).shape)
    labels = df['genre'].tolist()[:nbr_sample]

    X_train, X_test, y_train, y_test = train_test_split(datas, labels, test_size=0.10, random_state=42)

    model = train(X_train,y_train)

    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)

    return acc

def feature_extractor_processing_2(nbr_sample):
    _msdi_path = "./../data/"
    df = msdi.get_msdi_dataframe(_msdi_path)
    df = shuffle(df)

    datas=[]
    for i in range(min(len(df),nbr_sample)):
        data = msdi.load_mfcc(df.iloc[i], _msdi_path)

        data_2 = np.zeros((len(data) - 1, len(data[0])))
        for j in range(len(data) - 1):
            data_2[j,:] = data[j+1] - data[j]

        data_3 = np.zeros((len(data_2) - 1, len(data_2[0])))
        for j in range(len(data_2) - 1):
            data_3[j,:] = data_2[j+1] - data_2[j]

        # tot_data = np.concatenate((data,data_2,data_3), axis=0)

        data = data.mean(axis=0)
        data_2 = data_2.mean(axis=0)
        data_3 = data_3.mean(axis=0)

        tot_data = [np.max(data), np.max(data_2), np.max(data_3)]

        datas.append(tot_data)

    print(np.array(datas).shape)
    labels = df['genre'].tolist()[:nbr_sample]

    X_train, X_test, y_train, y_test = train_test_split(datas, labels, test_size=0.10, random_state=42)

    model = train(X_train,y_train)

    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)

    return acc

if __name__ == "__main__":
    result=feature_extractor_processing_2(1000)
    print(result)

    # _msdi_path = "./../data/"
    # df = msdi.get_msdi_dataframe(_msdi_path)
    # print(msdi.load_mfcc(df.iloc[14], _msdi_path).shape)